#!/usr/bin/env python

from sys import argv, exit, path, stderr
from os import getenv, putenv, environ, waitpid
from os.path import exists, dirname, join

# Set up so Django db settings can be used
if exists(join(dirname(argv[0]), '..', 'settings.py')):
	path.append(join(dirname(argv[0]), '..'))

DJANGO_SETTINGS_MODULE = 'DJANGO_SETTINGS_MODULE'
if not getenv(DJANGO_SETTINGS_MODULE):
	environ[DJANGO_SETTINGS_MODULE] = 'settings'
	putenv(DJANGO_SETTINGS_MODULE, environ[DJANGO_SETTINGS_MODULE])

from tempfile import mkdtemp
from django.db import connection, transaction
from django.conf import settings
from django.core import serializers

from process import spawn

TABLES = ['auth_group', 'auth_group_permissions', 'auth_message',
	  'auth_permission', 'auth_user', 'auth_user_groups',
	  'auth_user_user_permissions',
	  'security_certificate',
	  'mcproperties', 'identity_providers']

def main(args):
    if len(args) != 2:
	print >>stderr, "Usage: mc-restore {console-backup.tar.bz2}"
	exit(1)

    dirname = mkdtemp()

    pid1 = spawn(['tar', 'xvjf', args[1], '-C', dirname, 'configuration.json'],
		 stderr = 2)
    pid2 = spawn(['tar', 'xvjf', args[1], '-C', settings.INSTALL_DIR, 'customize'],
		 stderr = 2)

    pid, status = waitpid(pid1, 0)

    if status != 0:
	exit(status)

    cursor = connection.cursor()
    transaction.enter_transaction_management()
    transaction.managed(True)

    f = file(join(dirname, 'configuration.json'), 'rb')
    try:
	objects = serializers.deserialize('json', f)

	for table in TABLES:
	    cursor.execute("DELETE FROM %s" % table)

	for obj in objects:
	    obj.save()

	transaction.commit()
	transaction.leave_transaction_management()
    finally:
	f.close()

    pid, status = waitpid(pid2, 0)
    if status != 0:
	exit(status)

if __name__ == '__main__':
    main(argv)
