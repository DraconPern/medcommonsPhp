#!/usr/bin/env python

from sys import argv, path
from os import getenv, putenv, environ
from os.path import exists, dirname, join

# Set up so Django db settings can be used
if exists(join(dirname(argv[0]), '..', 'settings.py')):
	path.append(join(dirname(argv[0]), '..'))

DJANGO_SETTINGS_MODULE = 'DJANGO_SETTINGS_MODULE'
if not getenv(DJANGO_SETTINGS_MODULE):
	environ[DJANGO_SETTINGS_MODULE] = 'settings'
	putenv(DJANGO_SETTINGS_MODULE, environ[DJANGO_SETTINGS_MODULE])

from django.db import connection, transaction

from sys import stderr

from users.models import normalize_mcid
from groups.models import Group, delete_group

def main(args):
    cursor = connection.cursor()

    transaction.enter_transaction_management()
    transaction.managed(True)

    for mcid in args[1:]:
	delete_mcid(cursor, long(normalize_mcid(mcid)))
	transaction.commit()

    transaction.leave_transaction_management()

def delete_mcid(cursor, mcid):
    # Delete groups (groupinstances) that this MCID owns
    for group in Group.objects.filter(accid = mcid):
	delete_group(group)

    # Remove all group ownership
    sql(cursor, "DELETE FROM groupmembers WHERE memberaccid = %s", mcid)

    # And all external_users (external identity providers, like OpenID)
    sql(cursor, "DELETE FROM external_users WHERE mcid = %s", mcid)

    # Now delete user
    sql(cursor, "DELETE FROM users WHERE mcid = %s", mcid)

    # rm -rf /opt/gateway/data/Repository/%(mcid)s

def sql(cursor, statement, *args):
    cursor.execute(statement, args)

if __name__ == '__main__':
    main(argv)
